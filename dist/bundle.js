webpackJsonp([0],{184:function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(12),c=r(a),f=n(185),s=r(f),p=function(e){function t(e){o(this,t);var n=u(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.dialogShow=n.dialogShow.bind(n),n.afterClose=n.afterClose.bind(n),n}return i(t,e),l(t,[{key:"dialogShow",value:function(){this.refs.tips.show()}},{key:"afterClose",value:function(){console.log("close")}},{key:"render",value:function(){return c.default.createElement("div",null,c.default.createElement("p",null,"111"),c.default.createElement("button",{onClick:this.dialogShow},"弹出框"),c.default.createElement(s.default,{title:"jack",ref:"tips",onclose:this.afterClose},"让我猜一下"))}}]),t}(a.Component);t.default=p},185:function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(12),c=r(a),f=n(186),s=r(f),p=n(190),b=function(e){function t(e){o(this,t);var n=u(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={flag:!1},n.show=n.show.bind(n),n.hide=n.hide.bind(n),n}return i(t,e),l(t,[{key:"show",value:function(){this.setState(function(e){e.flag=!0})}},{key:"hide",value:function(){this.setState(function(e){this.props.onclose(),e.flag=!1})}},{key:"render",value:function(){return this.state.flag&&c.default.createElement(p.Mask,null,c.default.createElement(s.default,{title:this.props.title,isflag:this.hide},this.props.children))}}]),t}(a.Component);t.default=b},186:function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(12),c=r(a),f=n(187),s=r(f),p=n(188),b=r(p),d=n(189),y=r(d),h={position:"absolute",top:"50%",left:"50%",transform:"translate3d(-50%,-50%,0)",background:"#fff",padding:"10px",zIndex:110,width:"50%"},_={display:"flex",justifyContent:"center",alignItems:"center"},w=function(e){function t(e){return o(this,t),u(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return i(t,e),l(t,[{key:"render",value:function(){return c.default.createElement("div",{style:h},c.default.createElement(s.default,{title:this.props.title}),c.default.createElement(b.default,null,this.props.children),c.default.createElement("div",{className:"btns",style:_},c.default.createElement(y.default,{type:"certain",isflag:this.props.isflag}),c.default.createElement(y.default,{type:"cancel",isflag:this.props.isflag})))}}]),t}(a.Component);t.default=w},187:function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(12),a=function(e){return e&&e.__esModule?e:{default:e}}(l),c={height:"45px",lineHeight:"45px",textAlign:"center"},f=function(e){function t(e){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return u(t,e),i(t,[{key:"render",value:function(){return a.default.createElement("div",{className:"title",style:c},this.props.title)}}]),t}(l.Component);t.default=f},188:function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(12),a=function(e){return e&&e.__esModule?e:{default:e}}(l),c={lineHeight:"35px",textAlign:"center",wordWrap:"break-word"},f=function(e){function t(e){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return u(t,e),i(t,[{key:"render",value:function(){return a.default.createElement("div",{className:"content",style:c},this.props.children)}}]),t}(l.Component);t.default=f},189:function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function i(e,t){return Object.assign({},t,e)}Object.defineProperty(t,"__esModule",{value:!0});var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(12),c=function(e){return e&&e.__esModule?e:{default:e}}(a),f={width:"80px",height:"35px",border:0,marginLeft:"10px",color:"#fff"},s=i(f,{background:"plum"}),p=i(f,{background:"pink"}),b=function(e){function t(e){r(this,t);var n=o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.close=n.close.bind(n),n}return u(t,e),l(t,[{key:"close",value:function(){this.props.isflag()}},{key:"render",value:function(){switch(this.props.type){case"certain":return c.default.createElement("button",{className:"btn",style:s,onClick:this.close},"确定");case"cancel":return c.default.createElement("button",{className:"btn",style:p,onClick:this.close},"取消");case"close":return c.default.createElement("button",{className:"btn"},"关闭")}}}]),t}(a.Component);t.default=b},190:function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.Mask=void 0;var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(12),a=function(e){return e&&e.__esModule?e:{default:e}}(l),c={width:"100%",height:"100%",background:"rgba(0,0,0,0.7)",zIndex:100,position:"absolute",left:0,top:0},f=function(e){function t(e){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return u(t,e),i(t,[{key:"render",value:function(){return a.default.createElement("div",{className:"box",style:c},this.props.children)}}]),t}(l.Component);t.Mask=f},83:function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}var o=n(12),u=r(o),i=n(57),l=r(i),a=n(184),c=r(a);l.default.render(u.default.createElement(c.default,null),document.querySelector("#root"))}},[83]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,